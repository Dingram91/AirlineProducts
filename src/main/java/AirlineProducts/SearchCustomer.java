package AirlineProducts;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class SearchCustomer extends javax.swing.JInternalFrame {

    private String path = null;
    private byte[] userImage = null;
    private DBManager dbManager;

    /**
     * Creates new form SearchCustomer
     */
    public SearchCustomer() {
        initComponents();

        ButtonGroup group = new ButtonGroup();
        group.add(rb_female);
        group.add(rb_male);
    }

    /**
     * Sets the DBManager to be used for interacting with the database.
     * 
     * @param manager 
     */
    public void setDBManager(DBManager dbManager) {
        this.dbManager = dbManager;
    }

    Connection con;
    PreparedStatement pst;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        l_firstName = new javax.swing.JPanel();
        l_firstname = new javax.swing.JLabel();
        l_lastName = new javax.swing.JLabel();
        l_nic = new javax.swing.JLabel();
        l_passport = new javax.swing.JLabel();
        l_address = new javax.swing.JLabel();
        txtlastname = new javax.swing.JTextField();
        txtfirstname = new javax.swing.JTextField();
        txtnic = new javax.swing.JTextField();
        txtpassport = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaddress = new javax.swing.JTextArea();
        l_customerID = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        l_dob = new javax.swing.JLabel();
        l_gender = new javax.swing.JLabel();
        l_contact = new javax.swing.JLabel();
        rb_male = new javax.swing.JRadioButton();
        rb_female = new javax.swing.JRadioButton();
        txtcontact = new javax.swing.JTextField();
        dc_dob = new com.toedter.calendar.JDateChooser();
        txtphoto = new javax.swing.JLabel();
        b_browse = new javax.swing.JButton();
        b_update = new javax.swing.JButton();
        btnClickedCancel = new javax.swing.JButton();
        txtcustid = new javax.swing.JTextField();
        b_find = new javax.swing.JButton();

        setName("searchCustomerFrame"); // NOI18N

        l_firstName.setBackground(new java.awt.Color(51, 0, 255));
        l_firstName.setName("textPanel1"); // NOI18N

        l_firstname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_firstname.setForeground(new java.awt.Color(255, 255, 255));
        l_firstname.setText("FirstName");
        l_firstname.setName("firstNameLabel"); // NOI18N

        l_lastName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_lastName.setForeground(new java.awt.Color(255, 255, 255));
        l_lastName.setText("LastName");
        l_lastName.setName("lastNameLabel"); // NOI18N

        l_nic.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_nic.setForeground(new java.awt.Color(255, 255, 255));
        l_nic.setText("Nic No");
        l_nic.setName("nicNoLabel"); // NOI18N

        l_passport.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_passport.setForeground(new java.awt.Color(255, 255, 255));
        l_passport.setText("Passport ID");
        l_passport.setName("passportIdLabel"); // NOI18N

        l_address.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_address.setForeground(new java.awt.Color(255, 255, 255));
        l_address.setText("Address");
        l_address.setName("addressLabel"); // NOI18N

        txtlastname.setName("lastNameBox"); // NOI18N

        txtfirstname.setName("firstNameBox"); // NOI18N

        txtnic.setName("nicNoBox"); // NOI18N

        txtpassport.setName("passportIdBox"); // NOI18N

        txtaddress.setColumns(20);
        txtaddress.setRows(5);
        txtaddress.setName("addressBox"); // NOI18N
        jScrollPane1.setViewportView(txtaddress);

        javax.swing.GroupLayout l_firstNameLayout = new javax.swing.GroupLayout(l_firstName);
        l_firstName.setLayout(l_firstNameLayout);
        l_firstNameLayout.setHorizontalGroup(
            l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(l_firstNameLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(l_firstNameLayout.createSequentialGroup()
                        .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(l_firstNameLayout.createSequentialGroup()
                                .addComponent(l_firstname)
                                .addGap(47, 47, 47)
                                .addComponent(txtfirstname))
                            .addGroup(l_firstNameLayout.createSequentialGroup()
                                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(l_address)
                                    .addComponent(l_passport)
                                    .addComponent(l_nic))
                                .addGap(38, 38, 38)
                                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1)
                                    .addComponent(txtpassport)
                                    .addComponent(txtnic))))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(l_firstNameLayout.createSequentialGroup()
                        .addComponent(l_lastName)
                        .addGap(48, 48, 48)
                        .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        l_firstNameLayout.setVerticalGroup(
            l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(l_firstNameLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_firstname)
                    .addComponent(txtfirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_lastName)
                    .addComponent(txtlastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_nic)
                    .addComponent(txtnic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_passport)
                    .addComponent(txtpassport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(l_firstNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_address)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        l_customerID.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        l_customerID.setText("Customer ID");

        jPanel2.setBackground(new java.awt.Color(51, 0, 255));

        l_dob.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_dob.setForeground(new java.awt.Color(255, 255, 255));
        l_dob.setText("Date of Birth");

        l_gender.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_gender.setForeground(new java.awt.Color(255, 255, 255));
        l_gender.setText("Gender");

        l_contact.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        l_contact.setForeground(new java.awt.Color(255, 255, 255));
        l_contact.setText("Contact");

        rb_male.setText("Male");
        rb_male.setName("maleRadioButton"); // NOI18N

        rb_female.setText("Female");
        rb_female.setName("femaleRadioButton"); // NOI18N

        txtcontact.setName("contactBox"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(l_dob)
                        .addGap(43, 43, 43)
                        .addComponent(dc_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l_gender)
                            .addComponent(l_contact))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(rb_male)
                                .addGap(18, 18, 18)
                                .addComponent(rb_female))
                            .addComponent(txtcontact))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_dob)
                    .addComponent(dc_dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_gender)
                    .addComponent(rb_male)
                    .addComponent(rb_female))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_contact)
                    .addComponent(txtcontact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        txtphoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        b_browse.setText("Browse");
        b_browse.setName("photoFileBrowserButton"); // NOI18N
        b_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_browseActionPerformed(evt);
            }
        });

        b_update.setText("Update");
        b_update.setName("updateButton"); // NOI18N
        b_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_updateActionPerformed(evt);
            }
        });

        btnClickedCancel.setText("Cancel");
        btnClickedCancel.setName("cancelButton"); // NOI18N
        btnClickedCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClickedCancelActionPerformed(evt);
            }
        });

        txtcustid.setName("customerIDBox"); // NOI18N

        b_find.setText("Find");
        b_find.setName("findButton"); // NOI18N
        b_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_findActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(l_customerID)
                        .addGap(29, 29, 29)
                        .addComponent(txtcustid, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(l_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtphoto, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(337, 337, 337)
                                .addComponent(b_browse, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(b_update, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClickedCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(b_find, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_customerID)
                    .addComponent(txtcustid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_find))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(l_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtphoto, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(b_browse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_update, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClickedCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_browseActionPerformed
        // TODO add your handling code here:

        try {
            JFileChooser picchooser = new JFileChooser();

            picchooser.showOpenDialog(null);
            File pic = picchooser.getSelectedFile();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "png", "jpg");
            picchooser.addChoosableFileFilter(filter);
            path = pic.getAbsolutePath();
            BufferedImage img;
            img = ImageIO.read(picchooser.getSelectedFile());
            ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(250, 250, Image.SCALE_DEFAULT));
            txtphoto.setIcon(imageIcon);

            File image = new File(path);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buff = new byte[1024];
            for (int readNum; (readNum = fis.read(buff)) != -1;) {
                baos.write(buff, 0, readNum);
            }
            userImage = baos.toByteArray();
        } catch (IOException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_b_browseActionPerformed

    private void b_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_updateActionPerformed
        // TODO add your handling code here:

        String id = txtcustid.getText();
        String firstname = txtfirstname.getText();
        String lastname = txtlastname.getText();
        String nic = txtnic.getText();
        String passport = txtpassport.getText();
        String address = txtaddress.getText();
        Date date = dc_dob.getDate();
        String contact = txtcontact.getText();
        String gender = (rb_male.isSelected()) ? "Male" : "Female";
        updateCustomer(id, firstname, lastname, nic, passport,
                address, date, contact, gender, userImage);
    }//GEN-LAST:event_b_updateActionPerformed

    private void btnClickedCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClickedCancelActionPerformed
        // TODO add your handling code here:

        this.hide();
    }//GEN-LAST:event_btnClickedCancelActionPerformed

    private void b_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_findActionPerformed
        // TODO add your handling code here:

        String id = txtcustid.getText();

        try {
            con = DbUtils.getDbConnection();
            pst = con.prepareStatement("select * from customer where id = ?");
            pst.setString(1, id);
            ResultSet rs = pst.executeQuery();

            if (rs.next() == false) {
                JOptionPane.showMessageDialog(this, "Record not Found");
            } else {
                String fname = rs.getString("firstname");
                String lname = rs.getString("lastname");
                String nic = rs.getString("nic");
                String passport = rs.getString("passport");

                String address = rs.getString("address");
                String dob = rs.getString("dob");
                Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(dob);
                String gender = rs.getString("gender");

                Blob blob = rs.getBlob("photo");
                byte[] _imagebytes = blob.getBytes(1, (int) blob.length());
                ImageIcon image = new ImageIcon(_imagebytes);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(txtphoto.getWidth(), txtphoto.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);

                if (gender.equals("Female")) {
                    rb_male.setSelected(false);
                    rb_female.setSelected(true);
                } else {
                    rb_male.setSelected(true);
                    rb_female.setSelected(false);
                }
                String contact = rs.getString("contact");

                txtfirstname.setText(fname.trim());
                txtlastname.setText(lname.trim());
                txtnic.setText(nic.trim());
                txtpassport.setText(passport.trim());
                txtaddress.setText(address.trim());
                txtcontact.setText(contact.trim());
                dc_dob.setDate(date1);
                txtphoto.setIcon(newImage);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_b_findActionPerformed

    /**
     * Verifies that a entered name is valid else it will display an error
     * via a dialog
     * 
     * @param name
     * @return true if name is valid
     */
    public boolean isValidName(String name) {
        if (name.length() < 2 || name.length() > 15) {
            JOptionPane.showMessageDialog(this, "Names must be between 2 and 15 characters");
            return false;
        }
        if (!name.chars().allMatch(Character::isLetter)) {
            JOptionPane.showMessageDialog(this, "Names may only contains letters");
            return false;
        }
        return true;
    }

    /**
     * Verifies that the National Identity Card is valid else it will display
     * an error message via a dialog
     * 
     * @param nic
     * @return true if the NIC is valid
     */
    public boolean isValidNIC(String nic) {
        if (nic.isEmpty()) {
            JOptionPane.showMessageDialog(this, "There is no valid NIC");
            return false;
        }
        return true;
    }

    /**
     * Verifies that the ID is valid else it will show an error dialog.
     * 
     * @param id
     * @return true if the ID is valid
     */
    public boolean hasValidID(String id) {
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "There is no valid ID");
            return false;
        }
        return true;
    }

    /**
     * Verifies that the passport is valid else it will show an error dialog.
     * 
     * @param passport
     * @return true if the passport is valid
     */
    public boolean isValidPassport(String passport) {
        if (!passport.matches("^(?!^0+$)[a-zA-Z0-9]{3,20}$")) {
            JOptionPane.showMessageDialog(this, "Passport is not valid");
            return false;
        }
        try {
            if (dbManager == null) {
                dbManager = DbUtils.getDBManager();
            }
            if (dbManager.isPassportTaken(passport)) {
                JOptionPane.showMessageDialog(this, "Passport is already associated with another customer");
                return false;
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to connect to database");
        } catch (SQLException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "An error occurred "
                    + "interacting with the database");
        }
        return true;
    }

    /**
     * Verifies that the entered address is valid else it will display an
     * error dialog.
     * 
     * @param address
     * @return true if the address is valid
     */
    public boolean isValidAddress(String address) {
        if (address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Address is not valid");
            return false;
        }
        return true;
    }

    /**
     * Verifies that the entered date is valid else it will show an error
     * dialog
     * 
     * @param date
     * @return true if the date is valid.
     */
    public boolean isValidDate(Date date) {
        DateFormat da = new SimpleDateFormat("yyyy-MM-dd");
        try {
            da.format(date);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Date is not formatted correctly");
            return false;
        }
        return true;
    }

    /**
     * Verifies that the user has selected a gender else it will display
     * an error dialog
     * 
     * @return true if a gender was selected.
     */
    public boolean hasSelectedGender() {
        if (rb_female.isSelected() || rb_male.isSelected()) {
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Please selected a gender");
            return false;
        }
    }

    /**
     * Verifies that a valid contact was entered else it will display an
     * error dialog
     * 
     * @param contact
     * @return true if a valid contact was entered
     */
    public boolean hasValidContact(String contact) {
        if (contact.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a contact");
            return false;
        } else {
            return true;
        }
    }

    /**
     * Verifies that all inputs are valid
     * 
     * @param id
     * @param firstname
     * @param lastname
     * @param nic
     * @param passport
     * @param address
     * @param date
     * @param contact
     * @return 
     */
    public boolean hasValidInputs(String id, String firstname, String lastname, String nic,
            String passport, String address, Date date, String contact) {
        return hasValidID(id) && isValidName(firstname) && isValidName(lastname)
                && isValidNIC(nic) && isValidAddress(address)
                && isValidDate(date) && hasValidContact(contact);
    }

    /**
     * Updates the user in the database if all user inputs were valid
     * 
     * @param id
     * @param firstname
     * @param lastname
     * @param nic
     * @param passport
     * @param address
     * @param date
     * @param contact
     * @param gender
     * @param userImage 
     */
    public void updateCustomer(String id, String firstname, String lastname, String nic,
            String passport, String address, Date date, String contact, String gender,
            byte[] userImage) {
        System.out.println("Update customers");
        if (hasValidInputs(id, firstname, lastname, nic, passport, address,
                date, contact)) {
            System.out.println("has valid inputs");
            try {
                if (dbManager == null) {
                    dbManager = DbUtils.getDBManager();
                }
                DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String dateFormatted = formatter.format(date);
                dbManager.updateCustomer(id, firstname, lastname, nic, passport,
                        address, dateFormatted, contact, gender, userImage);
                JOptionPane.showMessageDialog(null, "File Updated...");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Unable to connect to database");
            } catch (SQLException ex) {
                Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "An error occurred "
                        + "interacting with the database");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_browse;
    private javax.swing.JButton b_find;
    private javax.swing.JButton b_update;
    protected javax.swing.JButton btnClickedCancel;
    private com.toedter.calendar.JDateChooser dc_dob;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_address;
    private javax.swing.JLabel l_contact;
    private javax.swing.JLabel l_customerID;
    private javax.swing.JLabel l_dob;
    private javax.swing.JPanel l_firstName;
    private javax.swing.JLabel l_firstname;
    private javax.swing.JLabel l_gender;
    private javax.swing.JLabel l_lastName;
    private javax.swing.JLabel l_nic;
    private javax.swing.JLabel l_passport;
    private javax.swing.JRadioButton rb_female;
    private javax.swing.JRadioButton rb_male;
    private javax.swing.JTextArea txtaddress;
    private javax.swing.JTextField txtcontact;
    private javax.swing.JTextField txtcustid;
    private javax.swing.JTextField txtfirstname;
    private javax.swing.JTextField txtlastname;
    private javax.swing.JTextField txtnic;
    private javax.swing.JTextField txtpassport;
    private javax.swing.JLabel txtphoto;
    // End of variables declaration//GEN-END:variables

}
